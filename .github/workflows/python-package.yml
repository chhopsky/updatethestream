# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Update the Stream

on:
  push:
    branches: [ development, 'udts-*' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, development ]

jobs:
  test:
    name: Code test
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
          cache: 'pipenv'
          cache-dependency-path: '**/Pipfile'
      - name: Setup Pipenv
        run: |
          python -m pip install -U pip pipenv
          pipenv install --deploy -d
      - name: Test
        run: pipenv run pytest tests.py

  build:
    needs: test
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            asset_name: udts-macos-x86_64-${{ github.run_number }}
          - os: windows-latest
            asset_name: udts-win64-${{ github.run_number }}

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: "3.8"
        cache: 'pipenv'
        cache-dependency-path: '**/Pipfile'

    - name: Build package
      run: |
        python -m pip install -U pip pipenv
        pipenv install -d pyinstaller
        pipenv run pyinstaller -y udts.spec

    - name: Package Streamdeck plugin
      run: |
        mkdir dist/plugins
        if [ "$RUNNER_OS" == "Windows" ]; then
          $GITHUB_WORKSPACE/DistributionTool.exe -b -i streamdeck/com.udts.sdPlugin -o dist/plugins
        else
          $GITHUB_WORKSPACE/DistributionTool -b -i streamdeck/com.udts.sdPlugin -o dist/plugins
        fi
      shell: bash
           
    - name: Code Signing Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
            New-Item -ItemType directory -Path certificate
            Set-Content -Path certificate\certificate.txt -Value '${{ secrets.CHH_CSC }}'
            certutil -decode certificate\certificate.txt certificate\certificate.pfx
            
    - name: Sign Cert Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $SEARCHFOLDER='C:\\Program Files (x86)\\Windows Kits\\10\\bin'
        $SIGNTOOL=(Get-ChildItem $SEARCHFOLDER -Include signtool.exe -Recurse -File -ErrorAction SilentlyContinue).FullName
        & "$SIGNTOOLLOCATION" sign /f certificate\\certificate.pfx /p '${{ secrets.CSC_P }}' /t http://timestamp.comodoca.com/authenticode dist\\udts.exe
        cd D:\\a\\updatethestream\\updatethestream

    - name: Copy readme files
      run: cp *.md dist/
      shell: bash

    - uses: nelonoel/branch-name@v1.0.1

    - name: Change folder name
      id: foldername
      run: |
        if [ "$BRANCH_NAME" == "main" ]; then
          version=$(egrep -oP '"version": "\K(\d+\.?)*)')
          foldername=udts-v$version-${{ matrix.os }}
        else
          foldername=udts-$(date '+%Y%m%d')-${GITHUB_SHA:0:7}-${{ matrix.os }}
        fi
        mv dist/ $foldername
        echo "::set-output name=foldername::$foldername"
      shell: bash

    - uses: vimtor/action-zip@v1
      with:
        files: ${{ steps.foldername.outputs.foldername }}
        recursive: false
        dest: ${{ matrix.asset_name }}.zip

    - uses: softprops/action-gh-release@v1
      if: ${{ env.BRANCH_NAME == 'main' && github.ref_type == 'tag' }}
      with:
        draft: true
        files: ${{ matrix.asset_name }}.zip
        body_path: ${{ github.workspace }}/patchnotes.md

    - uses: actions/checkout@v2
      with:
        repository: ${{ secrets.WEB_REPO }}
        token: ${{ secrets.GH_PAT }}
        path: 'website'
        fetch-depth: 0

    - name: Publish build to website
      run: |
        if [ "$BRANCH_NAME" == "main" ]; then
          folder=releases
        else
          folder=development
        fi
        cp ${{ matrix.asset_name }}.zip website/builds/$folder/${{ steps.foldername.outputs.foldername }}.zip
        cd website
        git config user.name "runner"
        git config user.email "runner@${{ matrix.os }}.local"
        git add .
        git commit -m "Upload build of commit ${GITHUB_SHA:0:7}"
        git push
      shell: bash
